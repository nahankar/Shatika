server {
    listen 80;
    server_name shatika.duckdns.org;

    # Redirect HTTP to HTTPS except for Let's Encrypt verification
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name shatika.duckdns.org;

    # Set client max body size to match Express fileUpload limit
    client_max_body_size 50M;

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/shatika.duckdns.org-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/shatika.duckdns.org-0001/privkey.pem;
    
    # SSL configurations (recommended settings)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # HSTS (optional, uncomment when SSL is working)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Define environment variables substitution
    sub_filter http://144.24.135.139 https://shatika.duckdns.org;
    sub_filter http://backend:5001 https://shatika.duckdns.org;
    sub_filter_once off;
    sub_filter_types *;

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    # Handle API requests
    location /api/ {
        # Using proxy_pass with internal HTTP is fine since this is inside Docker network
        # The external request is HTTPS, this doesn't create mixed content
        proxy_pass http://backend:5001/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_cache_bypass $http_upgrade;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
} 